/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.defaultsm;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean cancelB;
		
		
		public void raiseCancelB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancelB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nfcTrigger;
		
		
		public void raiseNfcTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							nfcTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coinTrigger;
		
		
		public void raiseCoinTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coinTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addCupB;
		
		
		public void raiseAddCupB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addCupB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doRefund;
		
		
		public boolean isRaisedDoRefund() {
			synchronized(DefaultSMStatemachine.this) {
				return doRefund;
			}
		}
		
		protected void raiseDoRefund() {
			synchronized(DefaultSMStatemachine.this) {
				doRefund = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoRefundRaised();
				}
			}
		}
		
		private boolean doReset;
		
		
		public boolean isRaisedDoReset() {
			synchronized(DefaultSMStatemachine.this) {
				return doReset;
			}
		}
		
		protected void raiseDoReset() {
			synchronized(DefaultSMStatemachine.this) {
				doReset = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetRaised();
				}
			}
		}
		
		private boolean doResetTimer;
		
		
		public boolean isRaisedDoResetTimer() {
			synchronized(DefaultSMStatemachine.this) {
				return doResetTimer;
			}
		}
		
		protected void raiseDoResetTimer() {
			synchronized(DefaultSMStatemachine.this) {
				doResetTimer = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetTimerRaised();
				}
			}
		}
		
		private boolean doWaterHeat;
		
		
		public boolean isRaisedDoWaterHeat() {
			synchronized(DefaultSMStatemachine.this) {
				return doWaterHeat;
			}
		}
		
		protected void raiseDoWaterHeat() {
			synchronized(DefaultSMStatemachine.this) {
				doWaterHeat = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWaterHeatRaised();
				}
			}
		}
		
		private boolean doCoffee;
		
		
		public boolean isRaisedDoCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				return doCoffee;
			}
		}
		
		protected void raiseDoCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				doCoffee = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCoffeeRaised();
				}
			}
		}
		
		private boolean doExpresso;
		
		
		public boolean isRaisedDoExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				return doExpresso;
			}
		}
		
		protected void raiseDoExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				doExpresso = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoExpressoRaised();
				}
			}
		}
		
		private boolean doTea;
		
		
		public boolean isRaisedDoTea() {
			synchronized(DefaultSMStatemachine.this) {
				return doTea;
			}
		}
		
		protected void raiseDoTea() {
			synchronized(DefaultSMStatemachine.this) {
				doTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoTeaRaised();
				}
			}
		}
		
		private boolean doWaterFlow;
		
		
		public boolean isRaisedDoWaterFlow() {
			synchronized(DefaultSMStatemachine.this) {
				return doWaterFlow;
			}
		}
		
		protected void raiseDoWaterFlow() {
			synchronized(DefaultSMStatemachine.this) {
				doWaterFlow = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWaterFlowRaised();
				}
			}
		}
		
		private String selection;
		
		public synchronized String getSelection() {
			synchronized(DefaultSMStatemachine.this) {
				return selection;
			}
		}
		
		public void setSelection(String value) {
			synchronized(DefaultSMStatemachine.this) {
				this.selection = value;
			}
		}
		
		private boolean hotWater;
		
		public synchronized boolean getHotWater() {
			synchronized(DefaultSMStatemachine.this) {
				return hotWater;
			}
		}
		
		public void setHotWater(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.hotWater = value;
			}
		}
		
		private boolean enoughtMoney;
		
		public synchronized boolean getEnoughtMoney() {
			synchronized(DefaultSMStatemachine.this) {
				return enoughtMoney;
			}
		}
		
		public void setEnoughtMoney(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.enoughtMoney = value;
			}
		}
		
		private long time;
		
		public synchronized long getTime() {
			synchronized(DefaultSMStatemachine.this) {
				return time;
			}
		}
		
		public void setTime(long value) {
			synchronized(DefaultSMStatemachine.this) {
				this.time = value;
			}
		}
		
		private boolean isHot;
		
		public synchronized boolean getIsHot() {
			synchronized(DefaultSMStatemachine.this) {
				return isHot;
			}
		}
		
		public void setIsHot(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.isHot = value;
			}
		}
		
		private boolean isComplete;
		
		public synchronized boolean getIsComplete() {
			synchronized(DefaultSMStatemachine.this) {
				return isComplete;
			}
		}
		
		public void setIsComplete(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.isComplete = value;
			}
		}
		
		private boolean isInfused;
		
		public synchronized boolean getIsInfused() {
			synchronized(DefaultSMStatemachine.this) {
				return isInfused;
			}
		}
		
		public void setIsInfused(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.isInfused = value;
			}
		}
		
		private boolean ready;
		
		public synchronized boolean getReady() {
			synchronized(DefaultSMStatemachine.this) {
				return ready;
			}
		}
		
		public void setReady(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.ready = value;
			}
		}
		
		protected void clearEvents() {
			cancelB = false;
			nfcTrigger = false;
			coinTrigger = false;
			addCupB = false;
		}
		protected void clearOutEvents() {
		
		doRefund = false;
		doReset = false;
		doResetTimer = false;
		doWaterHeat = false;
		doCoffee = false;
		doExpresso = false;
		doTea = false;
		doWaterFlow = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Init,
		main_region_UserSelction,
		main_region_UserSelction_Payment_PayWait,
		main_region_UserSelction_Payment_Coins,
		main_region_UserSelction_Payment_NFC,
		main_region_UserSelction_produceSelection_SelectionWait,
		main_region_UserSelction_time_timer,
		main_region_HotDrinkPreparation,
		main_region_HotDrinkPreparation_r1_waterHeat,
		main_region_HotDrinkPreparation_r1_sugarAdd,
		main_region_HotDrinkPreparation_r1_pause,
		main_region_HotDrinkPreparation_r2_start,
		main_region_HotDrinkPreparation_r2_coffee,
		main_region_HotDrinkPreparation_r2_expresso,
		main_region_HotDrinkPreparation_r2_tea,
		main_region_HotDrinkPreparation_r2_putCup,
		main_region_HotDrinkPreparation_r2_waterFlow,
		main_region_HotDrinkPreparation_r2_infusion,
		main_region_HotDrinkPreparation_r2_finish,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[12];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setSelection("");
		
		sCInterface.setHotWater(false);
		
		sCInterface.setEnoughtMoney(false);
		
		sCInterface.setTime(0);
		
		sCInterface.setIsHot(false);
		
		sCInterface.setIsComplete(false);
		
		sCInterface.setIsInfused(false);
		
		sCInterface.setReady(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Init:
				main_region_Init_react(true);
				break;
			case main_region_UserSelction_Payment_PayWait:
				main_region_UserSelction_Payment_PayWait_react(true);
				break;
			case main_region_UserSelction_Payment_Coins:
				main_region_UserSelction_Payment_Coins_react(true);
				break;
			case main_region_UserSelction_Payment_NFC:
				main_region_UserSelction_Payment_NFC_react(true);
				break;
			case main_region_UserSelction_produceSelection_SelectionWait:
				main_region_UserSelction_produceSelection_SelectionWait_react(true);
				break;
			case main_region_UserSelction_time_timer:
				main_region_UserSelction_time_timer_react(true);
				break;
			case main_region_HotDrinkPreparation_r1_waterHeat:
				main_region_HotDrinkPreparation_r1_waterHeat_react(true);
				break;
			case main_region_HotDrinkPreparation_r1_sugarAdd:
				main_region_HotDrinkPreparation_r1_sugarAdd_react(true);
				break;
			case main_region_HotDrinkPreparation_r1_pause:
				main_region_HotDrinkPreparation_r1_pause_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_start:
				main_region_HotDrinkPreparation_r2_start_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_coffee:
				main_region_HotDrinkPreparation_r2_coffee_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_expresso:
				main_region_HotDrinkPreparation_r2_expresso_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_tea:
				main_region_HotDrinkPreparation_r2_tea_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_putCup:
				main_region_HotDrinkPreparation_r2_putCup_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_waterFlow:
				main_region_HotDrinkPreparation_r2_waterFlow_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_infusion:
				main_region_HotDrinkPreparation_r2_infusion_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_finish:
				main_region_HotDrinkPreparation_r2_finish_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Init:
			return stateVector[0] == State.main_region_Init;
		case main_region_UserSelction:
			return stateVector[0].ordinal() >= State.
					main_region_UserSelction.ordinal()&& stateVector[0].ordinal() <= State.main_region_UserSelction_time_timer.ordinal();
		case main_region_UserSelction_Payment_PayWait:
			return stateVector[0] == State.main_region_UserSelction_Payment_PayWait;
		case main_region_UserSelction_Payment_Coins:
			return stateVector[0] == State.main_region_UserSelction_Payment_Coins;
		case main_region_UserSelction_Payment_NFC:
			return stateVector[0] == State.main_region_UserSelction_Payment_NFC;
		case main_region_UserSelction_produceSelection_SelectionWait:
			return stateVector[1] == State.main_region_UserSelction_produceSelection_SelectionWait;
		case main_region_UserSelction_time_timer:
			return stateVector[2] == State.main_region_UserSelction_time_timer;
		case main_region_HotDrinkPreparation:
			return stateVector[0].ordinal() >= State.
					main_region_HotDrinkPreparation.ordinal()&& stateVector[0].ordinal() <= State.main_region_HotDrinkPreparation_r2_finish.ordinal();
		case main_region_HotDrinkPreparation_r1_waterHeat:
			return stateVector[0] == State.main_region_HotDrinkPreparation_r1_waterHeat;
		case main_region_HotDrinkPreparation_r1_sugarAdd:
			return stateVector[0] == State.main_region_HotDrinkPreparation_r1_sugarAdd;
		case main_region_HotDrinkPreparation_r1_pause:
			return stateVector[0] == State.main_region_HotDrinkPreparation_r1_pause;
		case main_region_HotDrinkPreparation_r2_start:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_start;
		case main_region_HotDrinkPreparation_r2_coffee:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_coffee;
		case main_region_HotDrinkPreparation_r2_expresso:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_expresso;
		case main_region_HotDrinkPreparation_r2_tea:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_tea;
		case main_region_HotDrinkPreparation_r2_putCup:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_putCup;
		case main_region_HotDrinkPreparation_r2_waterFlow:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_waterFlow;
		case main_region_HotDrinkPreparation_r2_infusion:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_infusion;
		case main_region_HotDrinkPreparation_r2_finish:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_finish;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseCancelB() {
		sCInterface.raiseCancelB();
	}
	
	public synchronized void raiseNfcTrigger() {
		sCInterface.raiseNfcTrigger();
	}
	
	public synchronized void raiseCoinTrigger() {
		sCInterface.raiseCoinTrigger();
	}
	
	public synchronized void raiseAddCupB() {
		sCInterface.raiseAddCupB();
	}
	
	public synchronized boolean isRaisedDoRefund() {
		return sCInterface.isRaisedDoRefund();
	}
	
	public synchronized boolean isRaisedDoReset() {
		return sCInterface.isRaisedDoReset();
	}
	
	public synchronized boolean isRaisedDoResetTimer() {
		return sCInterface.isRaisedDoResetTimer();
	}
	
	public synchronized boolean isRaisedDoWaterHeat() {
		return sCInterface.isRaisedDoWaterHeat();
	}
	
	public synchronized boolean isRaisedDoCoffee() {
		return sCInterface.isRaisedDoCoffee();
	}
	
	public synchronized boolean isRaisedDoExpresso() {
		return sCInterface.isRaisedDoExpresso();
	}
	
	public synchronized boolean isRaisedDoTea() {
		return sCInterface.isRaisedDoTea();
	}
	
	public synchronized boolean isRaisedDoWaterFlow() {
		return sCInterface.isRaisedDoWaterFlow();
	}
	
	public synchronized String getSelection() {
		return sCInterface.getSelection();
	}
	
	public synchronized void setSelection(String value) {
		sCInterface.setSelection(value);
	}
	
	public synchronized boolean getHotWater() {
		return sCInterface.getHotWater();
	}
	
	public synchronized void setHotWater(boolean value) {
		sCInterface.setHotWater(value);
	}
	
	public synchronized boolean getEnoughtMoney() {
		return sCInterface.getEnoughtMoney();
	}
	
	public synchronized void setEnoughtMoney(boolean value) {
		sCInterface.setEnoughtMoney(value);
	}
	
	public synchronized long getTime() {
		return sCInterface.getTime();
	}
	
	public synchronized void setTime(long value) {
		sCInterface.setTime(value);
	}
	
	public synchronized boolean getIsHot() {
		return sCInterface.getIsHot();
	}
	
	public synchronized void setIsHot(boolean value) {
		sCInterface.setIsHot(value);
	}
	
	public synchronized boolean getIsComplete() {
		return sCInterface.getIsComplete();
	}
	
	public synchronized void setIsComplete(boolean value) {
		sCInterface.setIsComplete(value);
	}
	
	public synchronized boolean getIsInfused() {
		return sCInterface.getIsInfused();
	}
	
	public synchronized void setIsInfused(boolean value) {
		sCInterface.setIsInfused(value);
	}
	
	public synchronized boolean getReady() {
		return sCInterface.getReady();
	}
	
	public synchronized void setReady(boolean value) {
		sCInterface.setReady(value);
	}
	
	private void effect_main_region_UserSelction_tr1() {
		exitSequence_main_region_UserSelction();
		enterSequence_main_region_HotDrinkPreparation_default();
		react();
	}
	
	private void effect_main_region_HotDrinkPreparation_tr0() {
		exitSequence_main_region_HotDrinkPreparation();
		enterSequence_main_region_Init_default();
		react();
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_main_region_Init() {
		timer.setTimer(this, 0, (1 * 1000), false);
		
		sCInterface.raiseDoReset();
	}
	
	/* Entry action for state 'waterHeat'. */
	private void entryAction_main_region_HotDrinkPreparation_r1_waterHeat() {
		timer.setTimer(this, 1, 7, true);
		
		sCInterface.raiseDoWaterHeat();
	}
	
	/* Entry action for state 'pause'. */
	private void entryAction_main_region_HotDrinkPreparation_r1_pause() {
		timer.setTimer(this, 2, 7, true);
	}
	
	/* Entry action for state 'coffee'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_coffee() {
		timer.setTimer(this, 3, (sCInterface.getTime() * 1000), false);
		
		sCInterface.raiseDoCoffee();
	}
	
	/* Entry action for state 'expresso'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_expresso() {
		timer.setTimer(this, 4, (sCInterface.getTime() * 1000), false);
		
		sCInterface.raiseDoExpresso();
	}
	
	/* Entry action for state 'tea'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_tea() {
		timer.setTimer(this, 5, (sCInterface.getTime() * 1000), false);
		
		sCInterface.raiseDoTea();
	}
	
	/* Entry action for state 'putCup'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_putCup() {
		timer.setTimer(this, 6, 7, true);
	}
	
	/* Entry action for state 'waterFlow'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_waterFlow() {
		timer.setTimer(this, 7, 100, true);
		
		timer.setTimer(this, 8, 100, true);
		
		timer.setTimer(this, 9, 100, true);
		
		sCInterface.raiseDoWaterFlow();
	}
	
	/* Entry action for state 'infusion'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_infusion() {
		timer.setTimer(this, 10, 100, true);
	}
	
	/* Entry action for state 'finish'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_finish() {
		timer.setTimer(this, 11, 7, false);
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_main_region_Init() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'waterHeat'. */
	private void exitAction_main_region_HotDrinkPreparation_r1_waterHeat() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'pause'. */
	private void exitAction_main_region_HotDrinkPreparation_r1_pause() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'coffee'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_coffee() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'expresso'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_expresso() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'tea'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_tea() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'putCup'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_putCup() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'waterFlow'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_waterFlow() {
		timer.unsetTimer(this, 7);
		
		timer.unsetTimer(this, 8);
		
		timer.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'infusion'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_infusion() {
		timer.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'finish'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_finish() {
		timer.unsetTimer(this, 11);
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		entryAction_main_region_Init();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Init;
	}
	
	/* 'default' enter sequence for state UserSelction */
	private void enterSequence_main_region_UserSelction_default() {
		enterSequence_main_region_UserSelction_Payment_default();
		enterSequence_main_region_UserSelction_produceSelection_default();
		enterSequence_main_region_UserSelction_time_default();
	}
	
	/* 'default' enter sequence for state PayWait */
	private void enterSequence_main_region_UserSelction_Payment_PayWait_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_UserSelction_Payment_PayWait;
	}
	
	/* 'default' enter sequence for state Coins */
	private void enterSequence_main_region_UserSelction_Payment_Coins_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_UserSelction_Payment_Coins;
	}
	
	/* 'default' enter sequence for state NFC */
	private void enterSequence_main_region_UserSelction_Payment_NFC_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_UserSelction_Payment_NFC;
	}
	
	/* 'default' enter sequence for state SelectionWait */
	private void enterSequence_main_region_UserSelction_produceSelection_SelectionWait_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_UserSelction_produceSelection_SelectionWait;
	}
	
	/* 'default' enter sequence for state timer */
	private void enterSequence_main_region_UserSelction_time_timer_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_UserSelction_time_timer;
	}
	
	/* 'default' enter sequence for state HotDrinkPreparation */
	private void enterSequence_main_region_HotDrinkPreparation_default() {
		enterSequence_main_region_HotDrinkPreparation_r1_default();
		enterSequence_main_region_HotDrinkPreparation_r2_default();
	}
	
	/* 'default' enter sequence for state waterHeat */
	private void enterSequence_main_region_HotDrinkPreparation_r1_waterHeat_default() {
		entryAction_main_region_HotDrinkPreparation_r1_waterHeat();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_HotDrinkPreparation_r1_waterHeat;
	}
	
	/* 'default' enter sequence for state sugarAdd */
	private void enterSequence_main_region_HotDrinkPreparation_r1_sugarAdd_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_HotDrinkPreparation_r1_sugarAdd;
	}
	
	/* 'default' enter sequence for state pause */
	private void enterSequence_main_region_HotDrinkPreparation_r1_pause_default() {
		entryAction_main_region_HotDrinkPreparation_r1_pause();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_HotDrinkPreparation_r1_pause;
	}
	
	/* 'default' enter sequence for state start */
	private void enterSequence_main_region_HotDrinkPreparation_r2_start_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_start;
	}
	
	/* 'default' enter sequence for state coffee */
	private void enterSequence_main_region_HotDrinkPreparation_r2_coffee_default() {
		entryAction_main_region_HotDrinkPreparation_r2_coffee();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_coffee;
	}
	
	/* 'default' enter sequence for state expresso */
	private void enterSequence_main_region_HotDrinkPreparation_r2_expresso_default() {
		entryAction_main_region_HotDrinkPreparation_r2_expresso();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_expresso;
	}
	
	/* 'default' enter sequence for state tea */
	private void enterSequence_main_region_HotDrinkPreparation_r2_tea_default() {
		entryAction_main_region_HotDrinkPreparation_r2_tea();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_tea;
	}
	
	/* 'default' enter sequence for state putCup */
	private void enterSequence_main_region_HotDrinkPreparation_r2_putCup_default() {
		entryAction_main_region_HotDrinkPreparation_r2_putCup();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_putCup;
	}
	
	/* 'default' enter sequence for state waterFlow */
	private void enterSequence_main_region_HotDrinkPreparation_r2_waterFlow_default() {
		entryAction_main_region_HotDrinkPreparation_r2_waterFlow();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_waterFlow;
	}
	
	/* 'default' enter sequence for state infusion */
	private void enterSequence_main_region_HotDrinkPreparation_r2_infusion_default() {
		entryAction_main_region_HotDrinkPreparation_r2_infusion();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_infusion;
	}
	
	/* 'default' enter sequence for state finish */
	private void enterSequence_main_region_HotDrinkPreparation_r2_finish_default() {
		entryAction_main_region_HotDrinkPreparation_r2_finish();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_finish;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Payment */
	private void enterSequence_main_region_UserSelction_Payment_default() {
		react_main_region_UserSelction_Payment__entry_Default();
	}
	
	/* 'default' enter sequence for region produceSelection */
	private void enterSequence_main_region_UserSelction_produceSelection_default() {
		react_main_region_UserSelction_produceSelection__entry_Default();
	}
	
	/* 'default' enter sequence for region time */
	private void enterSequence_main_region_UserSelction_time_default() {
		react_main_region_UserSelction_time__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_HotDrinkPreparation_r1_default() {
		react_main_region_HotDrinkPreparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_HotDrinkPreparation_r2_default() {
		react_main_region_HotDrinkPreparation_r2__entry_Default();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Init();
	}
	
	/* Default exit sequence for state UserSelction */
	private void exitSequence_main_region_UserSelction() {
		exitSequence_main_region_UserSelction_Payment();
		exitSequence_main_region_UserSelction_produceSelection();
		exitSequence_main_region_UserSelction_time();
	}
	
	/* Default exit sequence for state PayWait */
	private void exitSequence_main_region_UserSelction_Payment_PayWait() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Coins */
	private void exitSequence_main_region_UserSelction_Payment_Coins() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state NFC */
	private void exitSequence_main_region_UserSelction_Payment_NFC() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state SelectionWait */
	private void exitSequence_main_region_UserSelction_produceSelection_SelectionWait() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state timer */
	private void exitSequence_main_region_UserSelction_time_timer() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state HotDrinkPreparation */
	private void exitSequence_main_region_HotDrinkPreparation() {
		exitSequence_main_region_HotDrinkPreparation_r1();
		exitSequence_main_region_HotDrinkPreparation_r2();
	}
	
	/* Default exit sequence for state waterHeat */
	private void exitSequence_main_region_HotDrinkPreparation_r1_waterHeat() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r1_waterHeat();
	}
	
	/* Default exit sequence for state sugarAdd */
	private void exitSequence_main_region_HotDrinkPreparation_r1_sugarAdd() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state pause */
	private void exitSequence_main_region_HotDrinkPreparation_r1_pause() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r1_pause();
	}
	
	/* Default exit sequence for state start */
	private void exitSequence_main_region_HotDrinkPreparation_r2_start() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state coffee */
	private void exitSequence_main_region_HotDrinkPreparation_r2_coffee() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_coffee();
	}
	
	/* Default exit sequence for state expresso */
	private void exitSequence_main_region_HotDrinkPreparation_r2_expresso() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_expresso();
	}
	
	/* Default exit sequence for state tea */
	private void exitSequence_main_region_HotDrinkPreparation_r2_tea() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_tea();
	}
	
	/* Default exit sequence for state putCup */
	private void exitSequence_main_region_HotDrinkPreparation_r2_putCup() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_putCup();
	}
	
	/* Default exit sequence for state waterFlow */
	private void exitSequence_main_region_HotDrinkPreparation_r2_waterFlow() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_waterFlow();
	}
	
	/* Default exit sequence for state infusion */
	private void exitSequence_main_region_HotDrinkPreparation_r2_infusion() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_infusion();
	}
	
	/* Default exit sequence for state finish */
	private void exitSequence_main_region_HotDrinkPreparation_r2_finish() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_finish();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Init:
			exitSequence_main_region_Init();
			break;
		case main_region_UserSelction_Payment_PayWait:
			exitSequence_main_region_UserSelction_Payment_PayWait();
			break;
		case main_region_UserSelction_Payment_Coins:
			exitSequence_main_region_UserSelction_Payment_Coins();
			break;
		case main_region_UserSelction_Payment_NFC:
			exitSequence_main_region_UserSelction_Payment_NFC();
			break;
		case main_region_HotDrinkPreparation_r1_waterHeat:
			exitSequence_main_region_HotDrinkPreparation_r1_waterHeat();
			break;
		case main_region_HotDrinkPreparation_r1_sugarAdd:
			exitSequence_main_region_HotDrinkPreparation_r1_sugarAdd();
			break;
		case main_region_HotDrinkPreparation_r1_pause:
			exitSequence_main_region_HotDrinkPreparation_r1_pause();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_UserSelction_produceSelection_SelectionWait:
			exitSequence_main_region_UserSelction_produceSelection_SelectionWait();
			break;
		case main_region_HotDrinkPreparation_r2_start:
			exitSequence_main_region_HotDrinkPreparation_r2_start();
			break;
		case main_region_HotDrinkPreparation_r2_coffee:
			exitSequence_main_region_HotDrinkPreparation_r2_coffee();
			break;
		case main_region_HotDrinkPreparation_r2_expresso:
			exitSequence_main_region_HotDrinkPreparation_r2_expresso();
			break;
		case main_region_HotDrinkPreparation_r2_tea:
			exitSequence_main_region_HotDrinkPreparation_r2_tea();
			break;
		case main_region_HotDrinkPreparation_r2_putCup:
			exitSequence_main_region_HotDrinkPreparation_r2_putCup();
			break;
		case main_region_HotDrinkPreparation_r2_waterFlow:
			exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
			break;
		case main_region_HotDrinkPreparation_r2_infusion:
			exitSequence_main_region_HotDrinkPreparation_r2_infusion();
			break;
		case main_region_HotDrinkPreparation_r2_finish:
			exitSequence_main_region_HotDrinkPreparation_r2_finish();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_UserSelction_time_timer:
			exitSequence_main_region_UserSelction_time_timer();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment */
	private void exitSequence_main_region_UserSelction_Payment() {
		switch (stateVector[0]) {
		case main_region_UserSelction_Payment_PayWait:
			exitSequence_main_region_UserSelction_Payment_PayWait();
			break;
		case main_region_UserSelction_Payment_Coins:
			exitSequence_main_region_UserSelction_Payment_Coins();
			break;
		case main_region_UserSelction_Payment_NFC:
			exitSequence_main_region_UserSelction_Payment_NFC();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region produceSelection */
	private void exitSequence_main_region_UserSelction_produceSelection() {
		switch (stateVector[1]) {
		case main_region_UserSelction_produceSelection_SelectionWait:
			exitSequence_main_region_UserSelction_produceSelection_SelectionWait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region time */
	private void exitSequence_main_region_UserSelction_time() {
		switch (stateVector[2]) {
		case main_region_UserSelction_time_timer:
			exitSequence_main_region_UserSelction_time_timer();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_HotDrinkPreparation_r1() {
		switch (stateVector[0]) {
		case main_region_HotDrinkPreparation_r1_waterHeat:
			exitSequence_main_region_HotDrinkPreparation_r1_waterHeat();
			break;
		case main_region_HotDrinkPreparation_r1_sugarAdd:
			exitSequence_main_region_HotDrinkPreparation_r1_sugarAdd();
			break;
		case main_region_HotDrinkPreparation_r1_pause:
			exitSequence_main_region_HotDrinkPreparation_r1_pause();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_HotDrinkPreparation_r2() {
		switch (stateVector[1]) {
		case main_region_HotDrinkPreparation_r2_start:
			exitSequence_main_region_HotDrinkPreparation_r2_start();
			break;
		case main_region_HotDrinkPreparation_r2_coffee:
			exitSequence_main_region_HotDrinkPreparation_r2_coffee();
			break;
		case main_region_HotDrinkPreparation_r2_expresso:
			exitSequence_main_region_HotDrinkPreparation_r2_expresso();
			break;
		case main_region_HotDrinkPreparation_r2_tea:
			exitSequence_main_region_HotDrinkPreparation_r2_tea();
			break;
		case main_region_HotDrinkPreparation_r2_putCup:
			exitSequence_main_region_HotDrinkPreparation_r2_putCup();
			break;
		case main_region_HotDrinkPreparation_r2_waterFlow:
			exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
			break;
		case main_region_HotDrinkPreparation_r2_infusion:
			exitSequence_main_region_HotDrinkPreparation_r2_infusion();
			break;
		case main_region_HotDrinkPreparation_r2_finish:
			exitSequence_main_region_HotDrinkPreparation_r2_finish();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_UserSelction_Payment__entry_Default() {
		enterSequence_main_region_UserSelction_Payment_PayWait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_UserSelction_produceSelection__entry_Default() {
		enterSequence_main_region_UserSelction_produceSelection_SelectionWait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_UserSelction_time__entry_Default() {
		enterSequence_main_region_UserSelction_time_timer_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_HotDrinkPreparation_r1__entry_Default() {
		enterSequence_main_region_HotDrinkPreparation_r1_waterHeat_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_HotDrinkPreparation_r2__entry_Default() {
		enterSequence_main_region_HotDrinkPreparation_r2_start_default();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_UserSelction_Payment__exit_Default() {
		effect_main_region_UserSelction_tr1();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_HotDrinkPreparation_r2__exit_Default() {
		effect_main_region_HotDrinkPreparation_tr0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_Init();
				enterSequence_main_region_UserSelction_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancelB) {
				exitSequence_main_region_UserSelction();
				sCInterface.raiseDoRefund();
				
				enterSequence_main_region_Init_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_Payment_PayWait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.nfcTrigger) {
				exitSequence_main_region_UserSelction_Payment_PayWait();
				sCInterface.raiseDoResetTimer();
				
				enterSequence_main_region_UserSelction_Payment_NFC_default();
			} else {
				if (sCInterface.coinTrigger) {
					exitSequence_main_region_UserSelction_Payment_PayWait();
					sCInterface.raiseDoResetTimer();
					
					enterSequence_main_region_UserSelction_Payment_Coins_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_Payment_Coins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.addCupB) && (sCInterface.getEnoughtMoney()))) {
				exitSequence_main_region_UserSelction_Payment_Coins();
				react_main_region_UserSelction_Payment__exit_Default();
			} else {
				if (sCInterface.coinTrigger) {
					exitSequence_main_region_UserSelction_Payment_Coins();
					sCInterface.raiseDoResetTimer();
					
					enterSequence_main_region_UserSelction_Payment_Coins_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_Payment_NFC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.addCupB) {
				exitSequence_main_region_UserSelction_Payment_NFC();
				react_main_region_UserSelction_Payment__exit_Default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_produceSelection_SelectionWait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_time_timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.doResetTimer) {
				exitSequence_main_region_UserSelction_time_timer();
				enterSequence_main_region_UserSelction_time_timer_default();
				main_region_UserSelction_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_UserSelction_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r1_waterHeat_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[1]) && (sCInterface.getIsHot()))) {
				exitSequence_main_region_HotDrinkPreparation_r1_waterHeat();
				enterSequence_main_region_HotDrinkPreparation_r1_pause_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r1_sugarAdd_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r1_pause_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[2]) && (sCInterface.getReady()))) {
				exitSequence_main_region_HotDrinkPreparation_r1_pause();
				enterSequence_main_region_HotDrinkPreparation_r1_sugarAdd_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getSelection()== null?"Coffee" ==null :sCInterface.getSelection().equals("Coffee"))) {
				exitSequence_main_region_HotDrinkPreparation_r2_start();
				enterSequence_main_region_HotDrinkPreparation_r2_coffee_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				if ((sCInterface.getSelection()== null?"Expresso" ==null :sCInterface.getSelection().equals("Expresso"))) {
					exitSequence_main_region_HotDrinkPreparation_r2_start();
					enterSequence_main_region_HotDrinkPreparation_r2_expresso_default();
					main_region_HotDrinkPreparation_react(false);
				} else {
					if ((sCInterface.getSelection()== null?"Tea" ==null :sCInterface.getSelection().equals("Tea"))) {
						exitSequence_main_region_HotDrinkPreparation_r2_start();
						enterSequence_main_region_HotDrinkPreparation_r2_tea_default();
						main_region_HotDrinkPreparation_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_coffee_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_HotDrinkPreparation_r2_coffee();
				enterSequence_main_region_HotDrinkPreparation_r2_putCup_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_expresso_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_main_region_HotDrinkPreparation_r2_expresso();
				enterSequence_main_region_HotDrinkPreparation_r2_putCup_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_tea_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_main_region_HotDrinkPreparation_r2_tea();
				enterSequence_main_region_HotDrinkPreparation_r2_putCup_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_putCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[6]) && (sCInterface.getIsHot()))) {
				exitSequence_main_region_HotDrinkPreparation_r2_putCup();
				enterSequence_main_region_HotDrinkPreparation_r2_waterFlow_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_waterFlow_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[7]) && ((sCInterface.getIsComplete() && (sCInterface.getSelection()== null?"Tea" ==null :sCInterface.getSelection().equals("Tea")))))) {
				exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
				enterSequence_main_region_HotDrinkPreparation_r2_infusion_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				if (((timeEvents[8]) && ((sCInterface.getIsComplete() && (sCInterface.getSelection()== null?"Coffee" ==null :sCInterface.getSelection().equals("Coffee")))))) {
					exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
					enterSequence_main_region_HotDrinkPreparation_r2_finish_default();
					main_region_HotDrinkPreparation_react(false);
				} else {
					if (((timeEvents[9]) && ((sCInterface.getIsComplete() && (sCInterface.getSelection()== null?"Expresso" ==null :sCInterface.getSelection().equals("Expresso")))))) {
						exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
						enterSequence_main_region_HotDrinkPreparation_r2_finish_default();
						main_region_HotDrinkPreparation_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_infusion_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[10]) && (sCInterface.getIsInfused()))) {
				exitSequence_main_region_HotDrinkPreparation_r2_infusion();
				enterSequence_main_region_HotDrinkPreparation_r2_finish_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_finish_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[11]) {
				exitSequence_main_region_HotDrinkPreparation_r2_finish();
				react_main_region_HotDrinkPreparation_r2__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
}
