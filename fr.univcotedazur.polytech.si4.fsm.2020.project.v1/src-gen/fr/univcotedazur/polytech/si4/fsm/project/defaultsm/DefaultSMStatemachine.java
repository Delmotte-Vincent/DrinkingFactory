/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.defaultsm;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class DefaultSMStatemachine implements IDefaultSMStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private SCInterfaceOperationCallback operationCallback;
		
		public synchronized void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean cancelB;
		
		
		public void raiseCancelB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancelB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean validateB;
		
		
		public void raiseValidateB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							validateB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean nfcTrigger;
		
		
		public void raiseNfcTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							nfcTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coinTrigger;
		
		
		public void raiseCoinTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coinTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean addCupB;
		
		
		public void raiseAddCupB() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							addCupB = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean sugarTrigger;
		
		
		public void raiseSugarTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							sugarTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean sizeTrigger;
		
		
		public void raiseSizeTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							sizeTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean temperatureTrigger;
		
		
		public void raiseTemperatureTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							temperatureTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean selectionTrigger;
		
		
		public void raiseSelectionTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							selectionTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean classicDrinkTrigger;
		
		
		public void raiseClassicDrinkTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							classicDrinkTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean soupTrigger;
		
		
		public void raiseSoupTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							soupTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean iceTeaTrigger;
		
		
		public void raiseIceTeaTrigger() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							iceTeaTrigger = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean coolingDone;
		
		
		public void raiseCoolingDone() {
			synchronized(DefaultSMStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							coolingDone = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean doRefund;
		
		
		public boolean isRaisedDoRefund() {
			synchronized(DefaultSMStatemachine.this) {
				return doRefund;
			}
		}
		
		protected void raiseDoRefund() {
			synchronized(DefaultSMStatemachine.this) {
				doRefund = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoRefundRaised();
				}
			}
		}
		
		private boolean doReset;
		
		
		public boolean isRaisedDoReset() {
			synchronized(DefaultSMStatemachine.this) {
				return doReset;
			}
		}
		
		protected void raiseDoReset() {
			synchronized(DefaultSMStatemachine.this) {
				doReset = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoResetRaised();
				}
			}
		}
		
		private boolean doWaterHeat;
		
		
		public boolean isRaisedDoWaterHeat() {
			synchronized(DefaultSMStatemachine.this) {
				return doWaterHeat;
			}
		}
		
		protected void raiseDoWaterHeat() {
			synchronized(DefaultSMStatemachine.this) {
				doWaterHeat = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWaterHeatRaised();
				}
			}
		}
		
		private boolean doCoffee;
		
		
		public boolean isRaisedDoCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				return doCoffee;
			}
		}
		
		protected void raiseDoCoffee() {
			synchronized(DefaultSMStatemachine.this) {
				doCoffee = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCoffeeRaised();
				}
			}
		}
		
		private boolean doExpresso;
		
		
		public boolean isRaisedDoExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				return doExpresso;
			}
		}
		
		protected void raiseDoExpresso() {
			synchronized(DefaultSMStatemachine.this) {
				doExpresso = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoExpressoRaised();
				}
			}
		}
		
		private boolean doTea;
		
		
		public boolean isRaisedDoTea() {
			synchronized(DefaultSMStatemachine.this) {
				return doTea;
			}
		}
		
		protected void raiseDoTea() {
			synchronized(DefaultSMStatemachine.this) {
				doTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoTeaRaised();
				}
			}
		}
		
		private boolean doSoup;
		
		
		public boolean isRaisedDoSoup() {
			synchronized(DefaultSMStatemachine.this) {
				return doSoup;
			}
		}
		
		protected void raiseDoSoup() {
			synchronized(DefaultSMStatemachine.this) {
				doSoup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoSoupRaised();
				}
			}
		}
		
		private boolean doIceTea;
		
		
		public boolean isRaisedDoIceTea() {
			synchronized(DefaultSMStatemachine.this) {
				return doIceTea;
			}
		}
		
		protected void raiseDoIceTea() {
			synchronized(DefaultSMStatemachine.this) {
				doIceTea = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoIceTeaRaised();
				}
			}
		}
		
		private boolean doWaterFlow;
		
		
		public boolean isRaisedDoWaterFlow() {
			synchronized(DefaultSMStatemachine.this) {
				return doWaterFlow;
			}
		}
		
		protected void raiseDoWaterFlow() {
			synchronized(DefaultSMStatemachine.this) {
				doWaterFlow = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoWaterFlowRaised();
				}
			}
		}
		
		private boolean doPutCup;
		
		
		public boolean isRaisedDoPutCup() {
			synchronized(DefaultSMStatemachine.this) {
				return doPutCup;
			}
		}
		
		protected void raiseDoPutCup() {
			synchronized(DefaultSMStatemachine.this) {
				doPutCup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPutCupRaised();
				}
			}
		}
		
		private boolean doCheckNFC;
		
		
		public boolean isRaisedDoCheckNFC() {
			synchronized(DefaultSMStatemachine.this) {
				return doCheckNFC;
			}
		}
		
		protected void raiseDoCheckNFC() {
			synchronized(DefaultSMStatemachine.this) {
				doCheckNFC = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCheckNFCRaised();
				}
			}
		}
		
		private boolean doAddSugar;
		
		
		public boolean isRaisedDoAddSugar() {
			synchronized(DefaultSMStatemachine.this) {
				return doAddSugar;
			}
		}
		
		protected void raiseDoAddSugar() {
			synchronized(DefaultSMStatemachine.this) {
				doAddSugar = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoAddSugarRaised();
				}
			}
		}
		
		private boolean doAddSpices;
		
		
		public boolean isRaisedDoAddSpices() {
			synchronized(DefaultSMStatemachine.this) {
				return doAddSpices;
			}
		}
		
		protected void raiseDoAddSpices() {
			synchronized(DefaultSMStatemachine.this) {
				doAddSpices = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoAddSpicesRaised();
				}
			}
		}
		
		private boolean doDecrement;
		
		
		public boolean isRaisedDoDecrement() {
			synchronized(DefaultSMStatemachine.this) {
				return doDecrement;
			}
		}
		
		protected void raiseDoDecrement() {
			synchronized(DefaultSMStatemachine.this) {
				doDecrement = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoDecrementRaised();
				}
			}
		}
		
		private boolean doNotify;
		
		
		public boolean isRaisedDoNotify() {
			synchronized(DefaultSMStatemachine.this) {
				return doNotify;
			}
		}
		
		protected void raiseDoNotify() {
			synchronized(DefaultSMStatemachine.this) {
				doNotify = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoNotifyRaised();
				}
			}
		}
		
		private boolean setClassicSliders;
		
		
		public boolean isRaisedSetClassicSliders() {
			synchronized(DefaultSMStatemachine.this) {
				return setClassicSliders;
			}
		}
		
		protected void raiseSetClassicSliders() {
			synchronized(DefaultSMStatemachine.this) {
				setClassicSliders = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onSetClassicSlidersRaised();
				}
			}
		}
		
		private boolean setSoupSliders;
		
		
		public boolean isRaisedSetSoupSliders() {
			synchronized(DefaultSMStatemachine.this) {
				return setSoupSliders;
			}
		}
		
		protected void raiseSetSoupSliders() {
			synchronized(DefaultSMStatemachine.this) {
				setSoupSliders = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onSetSoupSlidersRaised();
				}
			}
		}
		
		private boolean setIceTeaSliders;
		
		
		public boolean isRaisedSetIceTeaSliders() {
			synchronized(DefaultSMStatemachine.this) {
				return setIceTeaSliders;
			}
		}
		
		protected void raiseSetIceTeaSliders() {
			synchronized(DefaultSMStatemachine.this) {
				setIceTeaSliders = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onSetIceTeaSlidersRaised();
				}
			}
		}
		
		private boolean doCooling;
		
		
		public boolean isRaisedDoCooling() {
			synchronized(DefaultSMStatemachine.this) {
				return doCooling;
			}
		}
		
		protected void raiseDoCooling() {
			synchronized(DefaultSMStatemachine.this) {
				doCooling = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoCoolingRaised();
				}
			}
		}
		
		private boolean doPay;
		
		
		public boolean isRaisedDoPay() {
			synchronized(DefaultSMStatemachine.this) {
				return doPay;
			}
		}
		
		protected void raiseDoPay() {
			synchronized(DefaultSMStatemachine.this) {
				doPay = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onDoPayRaised();
				}
			}
		}
		
		private String selection;
		
		public synchronized String getSelection() {
			synchronized(DefaultSMStatemachine.this) {
				return selection;
			}
		}
		
		public void setSelection(String value) {
			synchronized(DefaultSMStatemachine.this) {
				this.selection = value;
			}
		}
		
		private long sliderSugar;
		
		public synchronized long getSliderSugar() {
			synchronized(DefaultSMStatemachine.this) {
				return sliderSugar;
			}
		}
		
		public void setSliderSugar(long value) {
			synchronized(DefaultSMStatemachine.this) {
				this.sliderSugar = value;
			}
		}
		
		private long sliderSize;
		
		public synchronized long getSliderSize() {
			synchronized(DefaultSMStatemachine.this) {
				return sliderSize;
			}
		}
		
		public void setSliderSize(long value) {
			synchronized(DefaultSMStatemachine.this) {
				this.sliderSize = value;
			}
		}
		
		private long sliderTemperature;
		
		public synchronized long getSliderTemperature() {
			synchronized(DefaultSMStatemachine.this) {
				return sliderTemperature;
			}
		}
		
		public void setSliderTemperature(long value) {
			synchronized(DefaultSMStatemachine.this) {
				this.sliderTemperature = value;
			}
		}
		
		private boolean ready;
		
		public synchronized boolean getReady() {
			synchronized(DefaultSMStatemachine.this) {
				return ready;
			}
		}
		
		public void setReady(boolean value) {
			synchronized(DefaultSMStatemachine.this) {
				this.ready = value;
			}
		}
		
		protected void clearEvents() {
			cancelB = false;
			validateB = false;
			nfcTrigger = false;
			coinTrigger = false;
			addCupB = false;
			sugarTrigger = false;
			sizeTrigger = false;
			temperatureTrigger = false;
			selectionTrigger = false;
			classicDrinkTrigger = false;
			soupTrigger = false;
			iceTeaTrigger = false;
			coolingDone = false;
		}
		protected void clearOutEvents() {
		
		doRefund = false;
		doReset = false;
		doWaterHeat = false;
		doCoffee = false;
		doExpresso = false;
		doTea = false;
		doSoup = false;
		doIceTea = false;
		doWaterFlow = false;
		doPutCup = false;
		doCheckNFC = false;
		doAddSugar = false;
		doAddSpices = false;
		doDecrement = false;
		doNotify = false;
		setClassicSliders = false;
		setSoupSliders = false;
		setIceTeaSliders = false;
		doCooling = false;
		doPay = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Init,
		main_region_UserSelction,
		main_region_UserSelction_Payment_PayWait,
		main_region_UserSelction_Payment_Coins,
		main_region_UserSelction_Payment_NFC,
		main_region_UserSelction_produceSelection_SelectionWait,
		main_region_UserSelction_sliderType_classicSliders,
		main_region_UserSelction_sliderType_soupSliders,
		main_region_UserSelction_sliderType_IceTeaSLiders,
		main_region_UserSelction_time_timer,
		main_region_HotDrinkPreparation,
		main_region_HotDrinkPreparation_r1_waterHeat,
		main_region_HotDrinkPreparation_r1_sugarAdd,
		main_region_HotDrinkPreparation_r1_pause,
		main_region_HotDrinkPreparation_r1_spicesAdd,
		main_region_HotDrinkPreparation_r2_start,
		main_region_HotDrinkPreparation_r2_coffee,
		main_region_HotDrinkPreparation_r2_expresso,
		main_region_HotDrinkPreparation_r2_tea,
		main_region_HotDrinkPreparation_r2_putCup,
		main_region_HotDrinkPreparation_r2_waterFlow,
		main_region_HotDrinkPreparation_r2_infusion,
		main_region_HotDrinkPreparation_r2_finish,
		main_region_HotDrinkPreparation_r2_soup,
		main_region_HotDrinkPreparation_r2_ice_tea,
		main_region_HotDrinkPreparation_r2_cooling,
		main_region_Pay,
		$NullState$
	};
	
	private final State[] stateVector = new State[4];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[21];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public DefaultSMStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setSelection("");
		
		sCInterface.setSliderSugar(0);
		
		sCInterface.setSliderSize(0);
		
		sCInterface.setSliderTemperature(0);
		
		sCInterface.setReady(false);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Init:
				main_region_Init_react(true);
				break;
			case main_region_UserSelction_Payment_PayWait:
				main_region_UserSelction_Payment_PayWait_react(true);
				break;
			case main_region_UserSelction_Payment_Coins:
				main_region_UserSelction_Payment_Coins_react(true);
				break;
			case main_region_UserSelction_Payment_NFC:
				main_region_UserSelction_Payment_NFC_react(true);
				break;
			case main_region_UserSelction_produceSelection_SelectionWait:
				main_region_UserSelction_produceSelection_SelectionWait_react(true);
				break;
			case main_region_UserSelction_sliderType_classicSliders:
				main_region_UserSelction_sliderType_classicSliders_react(true);
				break;
			case main_region_UserSelction_sliderType_soupSliders:
				main_region_UserSelction_sliderType_soupSliders_react(true);
				break;
			case main_region_UserSelction_sliderType_IceTeaSLiders:
				main_region_UserSelction_sliderType_IceTeaSLiders_react(true);
				break;
			case main_region_UserSelction_time_timer:
				main_region_UserSelction_time_timer_react(true);
				break;
			case main_region_HotDrinkPreparation_r1_waterHeat:
				main_region_HotDrinkPreparation_r1_waterHeat_react(true);
				break;
			case main_region_HotDrinkPreparation_r1_sugarAdd:
				main_region_HotDrinkPreparation_r1_sugarAdd_react(true);
				break;
			case main_region_HotDrinkPreparation_r1_pause:
				main_region_HotDrinkPreparation_r1_pause_react(true);
				break;
			case main_region_HotDrinkPreparation_r1_spicesAdd:
				main_region_HotDrinkPreparation_r1_spicesAdd_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_start:
				main_region_HotDrinkPreparation_r2_start_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_coffee:
				main_region_HotDrinkPreparation_r2_coffee_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_expresso:
				main_region_HotDrinkPreparation_r2_expresso_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_tea:
				main_region_HotDrinkPreparation_r2_tea_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_putCup:
				main_region_HotDrinkPreparation_r2_putCup_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_waterFlow:
				main_region_HotDrinkPreparation_r2_waterFlow_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_infusion:
				main_region_HotDrinkPreparation_r2_infusion_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_finish:
				main_region_HotDrinkPreparation_r2_finish_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_soup:
				main_region_HotDrinkPreparation_r2_soup_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_ice_tea:
				main_region_HotDrinkPreparation_r2_ice_tea_react(true);
				break;
			case main_region_HotDrinkPreparation_r2_cooling:
				main_region_HotDrinkPreparation_r2_cooling_react(true);
				break;
			case main_region_Pay:
				main_region_Pay_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Init:
			return stateVector[0] == State.main_region_Init;
		case main_region_UserSelction:
			return stateVector[0].ordinal() >= State.
					main_region_UserSelction.ordinal()&& stateVector[0].ordinal() <= State.main_region_UserSelction_time_timer.ordinal();
		case main_region_UserSelction_Payment_PayWait:
			return stateVector[0] == State.main_region_UserSelction_Payment_PayWait;
		case main_region_UserSelction_Payment_Coins:
			return stateVector[0] == State.main_region_UserSelction_Payment_Coins;
		case main_region_UserSelction_Payment_NFC:
			return stateVector[0] == State.main_region_UserSelction_Payment_NFC;
		case main_region_UserSelction_produceSelection_SelectionWait:
			return stateVector[1] == State.main_region_UserSelction_produceSelection_SelectionWait;
		case main_region_UserSelction_sliderType_classicSliders:
			return stateVector[2] == State.main_region_UserSelction_sliderType_classicSliders;
		case main_region_UserSelction_sliderType_soupSliders:
			return stateVector[2] == State.main_region_UserSelction_sliderType_soupSliders;
		case main_region_UserSelction_sliderType_IceTeaSLiders:
			return stateVector[2] == State.main_region_UserSelction_sliderType_IceTeaSLiders;
		case main_region_UserSelction_time_timer:
			return stateVector[3] == State.main_region_UserSelction_time_timer;
		case main_region_HotDrinkPreparation:
			return stateVector[0].ordinal() >= State.
					main_region_HotDrinkPreparation.ordinal()&& stateVector[0].ordinal() <= State.main_region_HotDrinkPreparation_r2_cooling.ordinal();
		case main_region_HotDrinkPreparation_r1_waterHeat:
			return stateVector[0] == State.main_region_HotDrinkPreparation_r1_waterHeat;
		case main_region_HotDrinkPreparation_r1_sugarAdd:
			return stateVector[0] == State.main_region_HotDrinkPreparation_r1_sugarAdd;
		case main_region_HotDrinkPreparation_r1_pause:
			return stateVector[0] == State.main_region_HotDrinkPreparation_r1_pause;
		case main_region_HotDrinkPreparation_r1_spicesAdd:
			return stateVector[0] == State.main_region_HotDrinkPreparation_r1_spicesAdd;
		case main_region_HotDrinkPreparation_r2_start:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_start;
		case main_region_HotDrinkPreparation_r2_coffee:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_coffee;
		case main_region_HotDrinkPreparation_r2_expresso:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_expresso;
		case main_region_HotDrinkPreparation_r2_tea:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_tea;
		case main_region_HotDrinkPreparation_r2_putCup:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_putCup;
		case main_region_HotDrinkPreparation_r2_waterFlow:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_waterFlow;
		case main_region_HotDrinkPreparation_r2_infusion:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_infusion;
		case main_region_HotDrinkPreparation_r2_finish:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_finish;
		case main_region_HotDrinkPreparation_r2_soup:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_soup;
		case main_region_HotDrinkPreparation_r2_ice_tea:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_ice_tea;
		case main_region_HotDrinkPreparation_r2_cooling:
			return stateVector[1] == State.main_region_HotDrinkPreparation_r2_cooling;
		case main_region_Pay:
			return stateVector[0] == State.main_region_Pay;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseCancelB() {
		sCInterface.raiseCancelB();
	}
	
	public synchronized void raiseValidateB() {
		sCInterface.raiseValidateB();
	}
	
	public synchronized void raiseNfcTrigger() {
		sCInterface.raiseNfcTrigger();
	}
	
	public synchronized void raiseCoinTrigger() {
		sCInterface.raiseCoinTrigger();
	}
	
	public synchronized void raiseAddCupB() {
		sCInterface.raiseAddCupB();
	}
	
	public synchronized void raiseSugarTrigger() {
		sCInterface.raiseSugarTrigger();
	}
	
	public synchronized void raiseSizeTrigger() {
		sCInterface.raiseSizeTrigger();
	}
	
	public synchronized void raiseTemperatureTrigger() {
		sCInterface.raiseTemperatureTrigger();
	}
	
	public synchronized void raiseSelectionTrigger() {
		sCInterface.raiseSelectionTrigger();
	}
	
	public synchronized void raiseClassicDrinkTrigger() {
		sCInterface.raiseClassicDrinkTrigger();
	}
	
	public synchronized void raiseSoupTrigger() {
		sCInterface.raiseSoupTrigger();
	}
	
	public synchronized void raiseIceTeaTrigger() {
		sCInterface.raiseIceTeaTrigger();
	}
	
	public synchronized void raiseCoolingDone() {
		sCInterface.raiseCoolingDone();
	}
	
	public synchronized boolean isRaisedDoRefund() {
		return sCInterface.isRaisedDoRefund();
	}
	
	public synchronized boolean isRaisedDoReset() {
		return sCInterface.isRaisedDoReset();
	}
	
	public synchronized boolean isRaisedDoWaterHeat() {
		return sCInterface.isRaisedDoWaterHeat();
	}
	
	public synchronized boolean isRaisedDoCoffee() {
		return sCInterface.isRaisedDoCoffee();
	}
	
	public synchronized boolean isRaisedDoExpresso() {
		return sCInterface.isRaisedDoExpresso();
	}
	
	public synchronized boolean isRaisedDoTea() {
		return sCInterface.isRaisedDoTea();
	}
	
	public synchronized boolean isRaisedDoSoup() {
		return sCInterface.isRaisedDoSoup();
	}
	
	public synchronized boolean isRaisedDoIceTea() {
		return sCInterface.isRaisedDoIceTea();
	}
	
	public synchronized boolean isRaisedDoWaterFlow() {
		return sCInterface.isRaisedDoWaterFlow();
	}
	
	public synchronized boolean isRaisedDoPutCup() {
		return sCInterface.isRaisedDoPutCup();
	}
	
	public synchronized boolean isRaisedDoCheckNFC() {
		return sCInterface.isRaisedDoCheckNFC();
	}
	
	public synchronized boolean isRaisedDoAddSugar() {
		return sCInterface.isRaisedDoAddSugar();
	}
	
	public synchronized boolean isRaisedDoAddSpices() {
		return sCInterface.isRaisedDoAddSpices();
	}
	
	public synchronized boolean isRaisedDoDecrement() {
		return sCInterface.isRaisedDoDecrement();
	}
	
	public synchronized boolean isRaisedDoNotify() {
		return sCInterface.isRaisedDoNotify();
	}
	
	public synchronized boolean isRaisedSetClassicSliders() {
		return sCInterface.isRaisedSetClassicSliders();
	}
	
	public synchronized boolean isRaisedSetSoupSliders() {
		return sCInterface.isRaisedSetSoupSliders();
	}
	
	public synchronized boolean isRaisedSetIceTeaSliders() {
		return sCInterface.isRaisedSetIceTeaSliders();
	}
	
	public synchronized boolean isRaisedDoCooling() {
		return sCInterface.isRaisedDoCooling();
	}
	
	public synchronized boolean isRaisedDoPay() {
		return sCInterface.isRaisedDoPay();
	}
	
	public synchronized String getSelection() {
		return sCInterface.getSelection();
	}
	
	public synchronized void setSelection(String value) {
		sCInterface.setSelection(value);
	}
	
	public synchronized long getSliderSugar() {
		return sCInterface.getSliderSugar();
	}
	
	public synchronized void setSliderSugar(long value) {
		sCInterface.setSliderSugar(value);
	}
	
	public synchronized long getSliderSize() {
		return sCInterface.getSliderSize();
	}
	
	public synchronized void setSliderSize(long value) {
		sCInterface.setSliderSize(value);
	}
	
	public synchronized long getSliderTemperature() {
		return sCInterface.getSliderTemperature();
	}
	
	public synchronized void setSliderTemperature(long value) {
		sCInterface.setSliderTemperature(value);
	}
	
	public synchronized boolean getReady() {
		return sCInterface.getReady();
	}
	
	public synchronized void setReady(boolean value) {
		sCInterface.setReady(value);
	}
	
	private void effect_main_region_UserSelction_tr1() {
		exitSequence_main_region_UserSelction();
		enterSequence_main_region_Pay_default();
		react();
	}
	
	private void effect_main_region_HotDrinkPreparation_tr0() {
		exitSequence_main_region_HotDrinkPreparation();
		enterSequence_main_region_Init_default();
		react();
	}
	
	/* Entry action for state 'Init'. */
	private void entryAction_main_region_Init() {
		timer.setTimer(this, 0, (1 * 1000), false);
		
		sCInterface.raiseDoReset();
	}
	
	/* Entry action for state 'Coins'. */
	private void entryAction_main_region_UserSelction_Payment_Coins() {
		timer.setTimer(this, 1, 7, true);
	}
	
	/* Entry action for state 'NFC'. */
	private void entryAction_main_region_UserSelction_Payment_NFC() {
		timer.setTimer(this, 2, 7, true);
		
		sCInterface.raiseDoCheckNFC();
	}
	
	/* Entry action for state 'SelectionWait'. */
	private void entryAction_main_region_UserSelction_produceSelection_SelectionWait() {
		sCInterface.setSelection(sCInterface.operationCallback.getSelection());
		
		sCInterface.setSliderSugar(sCInterface.operationCallback.getSugar());
		
		sCInterface.setSliderSize(sCInterface.operationCallback.getSize());
		
		sCInterface.setSliderTemperature(sCInterface.operationCallback.getTemperature());
	}
	
	/* Entry action for state 'classicSliders'. */
	private void entryAction_main_region_UserSelction_sliderType_classicSliders() {
		sCInterface.raiseSetClassicSliders();
	}
	
	/* Entry action for state 'soupSliders'. */
	private void entryAction_main_region_UserSelction_sliderType_soupSliders() {
		sCInterface.raiseSetSoupSliders();
	}
	
	/* Entry action for state 'IceTeaSLiders'. */
	private void entryAction_main_region_UserSelction_sliderType_IceTeaSLiders() {
		sCInterface.raiseSetIceTeaSliders();
	}
	
	/* Entry action for state 'timer'. */
	private void entryAction_main_region_UserSelction_time_timer() {
		timer.setTimer(this, 3, (45 * 1000), false);
	}
	
	/* Entry action for state 'waterHeat'. */
	private void entryAction_main_region_HotDrinkPreparation_r1_waterHeat() {
		timer.setTimer(this, 4, 7, true);
		
		timer.setTimer(this, 5, (1 * 1000), true);
		
		sCInterface.raiseDoWaterHeat();
	}
	
	/* Entry action for state 'sugarAdd'. */
	private void entryAction_main_region_HotDrinkPreparation_r1_sugarAdd() {
		sCInterface.raiseDoAddSugar();
	}
	
	/* Entry action for state 'pause'. */
	private void entryAction_main_region_HotDrinkPreparation_r1_pause() {
		timer.setTimer(this, 6, 7, true);
		
		timer.setTimer(this, 7, 7, true);
	}
	
	/* Entry action for state 'spicesAdd'. */
	private void entryAction_main_region_HotDrinkPreparation_r1_spicesAdd() {
		sCInterface.raiseDoAddSpices();
	}
	
	/* Entry action for state 'start'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_start() {
		sCInterface.raiseDoDecrement();
	}
	
	/* Entry action for state 'coffee'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_coffee() {
		timer.setTimer(this, 8, (2 * 1000), false);
		
		sCInterface.raiseDoCoffee();
	}
	
	/* Entry action for state 'expresso'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_expresso() {
		timer.setTimer(this, 9, (2 * 1000), false);
		
		sCInterface.raiseDoExpresso();
	}
	
	/* Entry action for state 'tea'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_tea() {
		timer.setTimer(this, 10, (2 * 1000), false);
		
		sCInterface.raiseDoTea();
	}
	
	/* Entry action for state 'putCup'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_putCup() {
		timer.setTimer(this, 11, 7, true);
		
		sCInterface.raiseDoPutCup();
	}
	
	/* Entry action for state 'waterFlow'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_waterFlow() {
		timer.setTimer(this, 12, 100, true);
		
		timer.setTimer(this, 13, 100, true);
		
		timer.setTimer(this, 14, 100, true);
		
		sCInterface.raiseDoWaterFlow();
	}
	
	/* Entry action for state 'infusion'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_infusion() {
		timer.setTimer(this, 15, (30 * 1000), false);
	}
	
	/* Entry action for state 'finish'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_finish() {
		timer.setTimer(this, 16, (10 * 1000), false);
		
		sCInterface.raiseDoNotify();
	}
	
	/* Entry action for state 'soup'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_soup() {
		timer.setTimer(this, 17, (2 * 1000), false);
		
		sCInterface.raiseDoSoup();
	}
	
	/* Entry action for state 'ice tea'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_ice_tea() {
		timer.setTimer(this, 18, (2 * 1000), false);
		
		sCInterface.raiseDoIceTea();
	}
	
	/* Entry action for state 'cooling'. */
	private void entryAction_main_region_HotDrinkPreparation_r2_cooling() {
		timer.setTimer(this, 19, (1 * 1000), true);
		
		sCInterface.raiseDoCooling();
	}
	
	/* Entry action for state 'Pay'. */
	private void entryAction_main_region_Pay() {
		timer.setTimer(this, 20, (1 * 1000), false);
		
		sCInterface.raiseDoPay();
	}
	
	/* Exit action for state 'Init'. */
	private void exitAction_main_region_Init() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Coins'. */
	private void exitAction_main_region_UserSelction_Payment_Coins() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'NFC'. */
	private void exitAction_main_region_UserSelction_Payment_NFC() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'timer'. */
	private void exitAction_main_region_UserSelction_time_timer() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'waterHeat'. */
	private void exitAction_main_region_HotDrinkPreparation_r1_waterHeat() {
		timer.unsetTimer(this, 4);
		
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'pause'. */
	private void exitAction_main_region_HotDrinkPreparation_r1_pause() {
		timer.unsetTimer(this, 6);
		
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'coffee'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_coffee() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'expresso'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_expresso() {
		timer.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'tea'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_tea() {
		timer.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'putCup'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_putCup() {
		timer.unsetTimer(this, 11);
	}
	
	/* Exit action for state 'waterFlow'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_waterFlow() {
		timer.unsetTimer(this, 12);
		
		timer.unsetTimer(this, 13);
		
		timer.unsetTimer(this, 14);
	}
	
	/* Exit action for state 'infusion'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_infusion() {
		timer.unsetTimer(this, 15);
	}
	
	/* Exit action for state 'finish'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_finish() {
		timer.unsetTimer(this, 16);
	}
	
	/* Exit action for state 'soup'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_soup() {
		timer.unsetTimer(this, 17);
	}
	
	/* Exit action for state 'ice tea'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_ice_tea() {
		timer.unsetTimer(this, 18);
	}
	
	/* Exit action for state 'cooling'. */
	private void exitAction_main_region_HotDrinkPreparation_r2_cooling() {
		timer.unsetTimer(this, 19);
	}
	
	/* Exit action for state 'Pay'. */
	private void exitAction_main_region_Pay() {
		timer.unsetTimer(this, 20);
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		entryAction_main_region_Init();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Init;
	}
	
	/* 'default' enter sequence for state UserSelction */
	private void enterSequence_main_region_UserSelction_default() {
		enterSequence_main_region_UserSelction_Payment_default();
		enterSequence_main_region_UserSelction_produceSelection_default();
		enterSequence_main_region_UserSelction_sliderType_default();
		enterSequence_main_region_UserSelction_time_default();
	}
	
	/* 'default' enter sequence for state PayWait */
	private void enterSequence_main_region_UserSelction_Payment_PayWait_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_UserSelction_Payment_PayWait;
	}
	
	/* 'default' enter sequence for state Coins */
	private void enterSequence_main_region_UserSelction_Payment_Coins_default() {
		entryAction_main_region_UserSelction_Payment_Coins();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_UserSelction_Payment_Coins;
	}
	
	/* 'default' enter sequence for state NFC */
	private void enterSequence_main_region_UserSelction_Payment_NFC_default() {
		entryAction_main_region_UserSelction_Payment_NFC();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_UserSelction_Payment_NFC;
	}
	
	/* 'default' enter sequence for state SelectionWait */
	private void enterSequence_main_region_UserSelction_produceSelection_SelectionWait_default() {
		entryAction_main_region_UserSelction_produceSelection_SelectionWait();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_UserSelction_produceSelection_SelectionWait;
	}
	
	/* 'default' enter sequence for state classicSliders */
	private void enterSequence_main_region_UserSelction_sliderType_classicSliders_default() {
		entryAction_main_region_UserSelction_sliderType_classicSliders();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_UserSelction_sliderType_classicSliders;
	}
	
	/* 'default' enter sequence for state soupSliders */
	private void enterSequence_main_region_UserSelction_sliderType_soupSliders_default() {
		entryAction_main_region_UserSelction_sliderType_soupSliders();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_UserSelction_sliderType_soupSliders;
	}
	
	/* 'default' enter sequence for state IceTeaSLiders */
	private void enterSequence_main_region_UserSelction_sliderType_IceTeaSLiders_default() {
		entryAction_main_region_UserSelction_sliderType_IceTeaSLiders();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_UserSelction_sliderType_IceTeaSLiders;
	}
	
	/* 'default' enter sequence for state timer */
	private void enterSequence_main_region_UserSelction_time_timer_default() {
		entryAction_main_region_UserSelction_time_timer();
		nextStateIndex = 3;
		stateVector[3] = State.main_region_UserSelction_time_timer;
	}
	
	/* 'default' enter sequence for state HotDrinkPreparation */
	private void enterSequence_main_region_HotDrinkPreparation_default() {
		enterSequence_main_region_HotDrinkPreparation_r1_default();
		enterSequence_main_region_HotDrinkPreparation_r2_default();
	}
	
	/* 'default' enter sequence for state waterHeat */
	private void enterSequence_main_region_HotDrinkPreparation_r1_waterHeat_default() {
		entryAction_main_region_HotDrinkPreparation_r1_waterHeat();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_HotDrinkPreparation_r1_waterHeat;
	}
	
	/* 'default' enter sequence for state sugarAdd */
	private void enterSequence_main_region_HotDrinkPreparation_r1_sugarAdd_default() {
		entryAction_main_region_HotDrinkPreparation_r1_sugarAdd();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_HotDrinkPreparation_r1_sugarAdd;
	}
	
	/* 'default' enter sequence for state pause */
	private void enterSequence_main_region_HotDrinkPreparation_r1_pause_default() {
		entryAction_main_region_HotDrinkPreparation_r1_pause();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_HotDrinkPreparation_r1_pause;
	}
	
	/* 'default' enter sequence for state spicesAdd */
	private void enterSequence_main_region_HotDrinkPreparation_r1_spicesAdd_default() {
		entryAction_main_region_HotDrinkPreparation_r1_spicesAdd();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_HotDrinkPreparation_r1_spicesAdd;
	}
	
	/* 'default' enter sequence for state start */
	private void enterSequence_main_region_HotDrinkPreparation_r2_start_default() {
		entryAction_main_region_HotDrinkPreparation_r2_start();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_start;
	}
	
	/* 'default' enter sequence for state coffee */
	private void enterSequence_main_region_HotDrinkPreparation_r2_coffee_default() {
		entryAction_main_region_HotDrinkPreparation_r2_coffee();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_coffee;
	}
	
	/* 'default' enter sequence for state expresso */
	private void enterSequence_main_region_HotDrinkPreparation_r2_expresso_default() {
		entryAction_main_region_HotDrinkPreparation_r2_expresso();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_expresso;
	}
	
	/* 'default' enter sequence for state tea */
	private void enterSequence_main_region_HotDrinkPreparation_r2_tea_default() {
		entryAction_main_region_HotDrinkPreparation_r2_tea();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_tea;
	}
	
	/* 'default' enter sequence for state putCup */
	private void enterSequence_main_region_HotDrinkPreparation_r2_putCup_default() {
		entryAction_main_region_HotDrinkPreparation_r2_putCup();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_putCup;
	}
	
	/* 'default' enter sequence for state waterFlow */
	private void enterSequence_main_region_HotDrinkPreparation_r2_waterFlow_default() {
		entryAction_main_region_HotDrinkPreparation_r2_waterFlow();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_waterFlow;
	}
	
	/* 'default' enter sequence for state infusion */
	private void enterSequence_main_region_HotDrinkPreparation_r2_infusion_default() {
		entryAction_main_region_HotDrinkPreparation_r2_infusion();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_infusion;
	}
	
	/* 'default' enter sequence for state finish */
	private void enterSequence_main_region_HotDrinkPreparation_r2_finish_default() {
		entryAction_main_region_HotDrinkPreparation_r2_finish();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_finish;
	}
	
	/* 'default' enter sequence for state soup */
	private void enterSequence_main_region_HotDrinkPreparation_r2_soup_default() {
		entryAction_main_region_HotDrinkPreparation_r2_soup();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_soup;
	}
	
	/* 'default' enter sequence for state ice tea */
	private void enterSequence_main_region_HotDrinkPreparation_r2_ice_tea_default() {
		entryAction_main_region_HotDrinkPreparation_r2_ice_tea();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_ice_tea;
	}
	
	/* 'default' enter sequence for state cooling */
	private void enterSequence_main_region_HotDrinkPreparation_r2_cooling_default() {
		entryAction_main_region_HotDrinkPreparation_r2_cooling();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_HotDrinkPreparation_r2_cooling;
	}
	
	/* 'default' enter sequence for state Pay */
	private void enterSequence_main_region_Pay_default() {
		entryAction_main_region_Pay();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Pay;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region Payment */
	private void enterSequence_main_region_UserSelction_Payment_default() {
		react_main_region_UserSelction_Payment__entry_Default();
	}
	
	/* 'default' enter sequence for region produceSelection */
	private void enterSequence_main_region_UserSelction_produceSelection_default() {
		react_main_region_UserSelction_produceSelection__entry_Default();
	}
	
	/* 'default' enter sequence for region sliderType */
	private void enterSequence_main_region_UserSelction_sliderType_default() {
		react_main_region_UserSelction_sliderType__entry_Default();
	}
	
	/* 'default' enter sequence for region time */
	private void enterSequence_main_region_UserSelction_time_default() {
		react_main_region_UserSelction_time__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_HotDrinkPreparation_r1_default() {
		react_main_region_HotDrinkPreparation_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_HotDrinkPreparation_r2_default() {
		react_main_region_HotDrinkPreparation_r2__entry_Default();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Init();
	}
	
	/* Default exit sequence for state UserSelction */
	private void exitSequence_main_region_UserSelction() {
		exitSequence_main_region_UserSelction_Payment();
		exitSequence_main_region_UserSelction_produceSelection();
		exitSequence_main_region_UserSelction_sliderType();
		exitSequence_main_region_UserSelction_time();
	}
	
	/* Default exit sequence for state PayWait */
	private void exitSequence_main_region_UserSelction_Payment_PayWait() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Coins */
	private void exitSequence_main_region_UserSelction_Payment_Coins() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_UserSelction_Payment_Coins();
	}
	
	/* Default exit sequence for state NFC */
	private void exitSequence_main_region_UserSelction_Payment_NFC() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_UserSelction_Payment_NFC();
	}
	
	/* Default exit sequence for state SelectionWait */
	private void exitSequence_main_region_UserSelction_produceSelection_SelectionWait() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state classicSliders */
	private void exitSequence_main_region_UserSelction_sliderType_classicSliders() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state soupSliders */
	private void exitSequence_main_region_UserSelction_sliderType_soupSliders() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state IceTeaSLiders */
	private void exitSequence_main_region_UserSelction_sliderType_IceTeaSLiders() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state timer */
	private void exitSequence_main_region_UserSelction_time_timer() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_main_region_UserSelction_time_timer();
	}
	
	/* Default exit sequence for state HotDrinkPreparation */
	private void exitSequence_main_region_HotDrinkPreparation() {
		exitSequence_main_region_HotDrinkPreparation_r1();
		exitSequence_main_region_HotDrinkPreparation_r2();
	}
	
	/* Default exit sequence for state waterHeat */
	private void exitSequence_main_region_HotDrinkPreparation_r1_waterHeat() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r1_waterHeat();
	}
	
	/* Default exit sequence for state sugarAdd */
	private void exitSequence_main_region_HotDrinkPreparation_r1_sugarAdd() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state pause */
	private void exitSequence_main_region_HotDrinkPreparation_r1_pause() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r1_pause();
	}
	
	/* Default exit sequence for state spicesAdd */
	private void exitSequence_main_region_HotDrinkPreparation_r1_spicesAdd() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state start */
	private void exitSequence_main_region_HotDrinkPreparation_r2_start() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state coffee */
	private void exitSequence_main_region_HotDrinkPreparation_r2_coffee() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_coffee();
	}
	
	/* Default exit sequence for state expresso */
	private void exitSequence_main_region_HotDrinkPreparation_r2_expresso() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_expresso();
	}
	
	/* Default exit sequence for state tea */
	private void exitSequence_main_region_HotDrinkPreparation_r2_tea() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_tea();
	}
	
	/* Default exit sequence for state putCup */
	private void exitSequence_main_region_HotDrinkPreparation_r2_putCup() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_putCup();
	}
	
	/* Default exit sequence for state waterFlow */
	private void exitSequence_main_region_HotDrinkPreparation_r2_waterFlow() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_waterFlow();
	}
	
	/* Default exit sequence for state infusion */
	private void exitSequence_main_region_HotDrinkPreparation_r2_infusion() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_infusion();
	}
	
	/* Default exit sequence for state finish */
	private void exitSequence_main_region_HotDrinkPreparation_r2_finish() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_finish();
	}
	
	/* Default exit sequence for state soup */
	private void exitSequence_main_region_HotDrinkPreparation_r2_soup() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_soup();
	}
	
	/* Default exit sequence for state ice tea */
	private void exitSequence_main_region_HotDrinkPreparation_r2_ice_tea() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_ice_tea();
	}
	
	/* Default exit sequence for state cooling */
	private void exitSequence_main_region_HotDrinkPreparation_r2_cooling() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_HotDrinkPreparation_r2_cooling();
	}
	
	/* Default exit sequence for state Pay */
	private void exitSequence_main_region_Pay() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Pay();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Init:
			exitSequence_main_region_Init();
			break;
		case main_region_UserSelction_Payment_PayWait:
			exitSequence_main_region_UserSelction_Payment_PayWait();
			break;
		case main_region_UserSelction_Payment_Coins:
			exitSequence_main_region_UserSelction_Payment_Coins();
			break;
		case main_region_UserSelction_Payment_NFC:
			exitSequence_main_region_UserSelction_Payment_NFC();
			break;
		case main_region_HotDrinkPreparation_r1_waterHeat:
			exitSequence_main_region_HotDrinkPreparation_r1_waterHeat();
			break;
		case main_region_HotDrinkPreparation_r1_sugarAdd:
			exitSequence_main_region_HotDrinkPreparation_r1_sugarAdd();
			break;
		case main_region_HotDrinkPreparation_r1_pause:
			exitSequence_main_region_HotDrinkPreparation_r1_pause();
			break;
		case main_region_HotDrinkPreparation_r1_spicesAdd:
			exitSequence_main_region_HotDrinkPreparation_r1_spicesAdd();
			break;
		case main_region_Pay:
			exitSequence_main_region_Pay();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_UserSelction_produceSelection_SelectionWait:
			exitSequence_main_region_UserSelction_produceSelection_SelectionWait();
			break;
		case main_region_HotDrinkPreparation_r2_start:
			exitSequence_main_region_HotDrinkPreparation_r2_start();
			break;
		case main_region_HotDrinkPreparation_r2_coffee:
			exitSequence_main_region_HotDrinkPreparation_r2_coffee();
			break;
		case main_region_HotDrinkPreparation_r2_expresso:
			exitSequence_main_region_HotDrinkPreparation_r2_expresso();
			break;
		case main_region_HotDrinkPreparation_r2_tea:
			exitSequence_main_region_HotDrinkPreparation_r2_tea();
			break;
		case main_region_HotDrinkPreparation_r2_putCup:
			exitSequence_main_region_HotDrinkPreparation_r2_putCup();
			break;
		case main_region_HotDrinkPreparation_r2_waterFlow:
			exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
			break;
		case main_region_HotDrinkPreparation_r2_infusion:
			exitSequence_main_region_HotDrinkPreparation_r2_infusion();
			break;
		case main_region_HotDrinkPreparation_r2_finish:
			exitSequence_main_region_HotDrinkPreparation_r2_finish();
			break;
		case main_region_HotDrinkPreparation_r2_soup:
			exitSequence_main_region_HotDrinkPreparation_r2_soup();
			break;
		case main_region_HotDrinkPreparation_r2_ice_tea:
			exitSequence_main_region_HotDrinkPreparation_r2_ice_tea();
			break;
		case main_region_HotDrinkPreparation_r2_cooling:
			exitSequence_main_region_HotDrinkPreparation_r2_cooling();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_UserSelction_sliderType_classicSliders:
			exitSequence_main_region_UserSelction_sliderType_classicSliders();
			break;
		case main_region_UserSelction_sliderType_soupSliders:
			exitSequence_main_region_UserSelction_sliderType_soupSliders();
			break;
		case main_region_UserSelction_sliderType_IceTeaSLiders:
			exitSequence_main_region_UserSelction_sliderType_IceTeaSLiders();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case main_region_UserSelction_time_timer:
			exitSequence_main_region_UserSelction_time_timer();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region Payment */
	private void exitSequence_main_region_UserSelction_Payment() {
		switch (stateVector[0]) {
		case main_region_UserSelction_Payment_PayWait:
			exitSequence_main_region_UserSelction_Payment_PayWait();
			break;
		case main_region_UserSelction_Payment_Coins:
			exitSequence_main_region_UserSelction_Payment_Coins();
			break;
		case main_region_UserSelction_Payment_NFC:
			exitSequence_main_region_UserSelction_Payment_NFC();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region produceSelection */
	private void exitSequence_main_region_UserSelction_produceSelection() {
		switch (stateVector[1]) {
		case main_region_UserSelction_produceSelection_SelectionWait:
			exitSequence_main_region_UserSelction_produceSelection_SelectionWait();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region sliderType */
	private void exitSequence_main_region_UserSelction_sliderType() {
		switch (stateVector[2]) {
		case main_region_UserSelction_sliderType_classicSliders:
			exitSequence_main_region_UserSelction_sliderType_classicSliders();
			break;
		case main_region_UserSelction_sliderType_soupSliders:
			exitSequence_main_region_UserSelction_sliderType_soupSliders();
			break;
		case main_region_UserSelction_sliderType_IceTeaSLiders:
			exitSequence_main_region_UserSelction_sliderType_IceTeaSLiders();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region time */
	private void exitSequence_main_region_UserSelction_time() {
		switch (stateVector[3]) {
		case main_region_UserSelction_time_timer:
			exitSequence_main_region_UserSelction_time_timer();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_HotDrinkPreparation_r1() {
		switch (stateVector[0]) {
		case main_region_HotDrinkPreparation_r1_waterHeat:
			exitSequence_main_region_HotDrinkPreparation_r1_waterHeat();
			break;
		case main_region_HotDrinkPreparation_r1_sugarAdd:
			exitSequence_main_region_HotDrinkPreparation_r1_sugarAdd();
			break;
		case main_region_HotDrinkPreparation_r1_pause:
			exitSequence_main_region_HotDrinkPreparation_r1_pause();
			break;
		case main_region_HotDrinkPreparation_r1_spicesAdd:
			exitSequence_main_region_HotDrinkPreparation_r1_spicesAdd();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_HotDrinkPreparation_r2() {
		switch (stateVector[1]) {
		case main_region_HotDrinkPreparation_r2_start:
			exitSequence_main_region_HotDrinkPreparation_r2_start();
			break;
		case main_region_HotDrinkPreparation_r2_coffee:
			exitSequence_main_region_HotDrinkPreparation_r2_coffee();
			break;
		case main_region_HotDrinkPreparation_r2_expresso:
			exitSequence_main_region_HotDrinkPreparation_r2_expresso();
			break;
		case main_region_HotDrinkPreparation_r2_tea:
			exitSequence_main_region_HotDrinkPreparation_r2_tea();
			break;
		case main_region_HotDrinkPreparation_r2_putCup:
			exitSequence_main_region_HotDrinkPreparation_r2_putCup();
			break;
		case main_region_HotDrinkPreparation_r2_waterFlow:
			exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
			break;
		case main_region_HotDrinkPreparation_r2_infusion:
			exitSequence_main_region_HotDrinkPreparation_r2_infusion();
			break;
		case main_region_HotDrinkPreparation_r2_finish:
			exitSequence_main_region_HotDrinkPreparation_r2_finish();
			break;
		case main_region_HotDrinkPreparation_r2_soup:
			exitSequence_main_region_HotDrinkPreparation_r2_soup();
			break;
		case main_region_HotDrinkPreparation_r2_ice_tea:
			exitSequence_main_region_HotDrinkPreparation_r2_ice_tea();
			break;
		case main_region_HotDrinkPreparation_r2_cooling:
			exitSequence_main_region_HotDrinkPreparation_r2_cooling();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Init_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_UserSelction_Payment__entry_Default() {
		enterSequence_main_region_UserSelction_Payment_PayWait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_UserSelction_produceSelection__entry_Default() {
		enterSequence_main_region_UserSelction_produceSelection_SelectionWait_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_UserSelction_sliderType__entry_Default() {
		enterSequence_main_region_UserSelction_sliderType_classicSliders_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_UserSelction_time__entry_Default() {
		enterSequence_main_region_UserSelction_time_timer_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_HotDrinkPreparation_r1__entry_Default() {
		enterSequence_main_region_HotDrinkPreparation_r1_waterHeat_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_HotDrinkPreparation_r2__entry_Default() {
		enterSequence_main_region_HotDrinkPreparation_r2_start_default();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_UserSelction_Payment__exit_Default() {
		effect_main_region_UserSelction_tr1();
	}
	
	/* The reactions of exit default. */
	private void react_main_region_HotDrinkPreparation_r2__exit_Default() {
		effect_main_region_HotDrinkPreparation_tr0();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_region_Init();
				enterSequence_main_region_UserSelction_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancelB) {
				exitSequence_main_region_UserSelction();
				sCInterface.raiseDoRefund();
				
				enterSequence_main_region_Init_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_Payment_PayWait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.nfcTrigger) {
				exitSequence_main_region_UserSelction_Payment_PayWait();
				enterSequence_main_region_UserSelction_Payment_NFC_default();
			} else {
				if (sCInterface.coinTrigger) {
					exitSequence_main_region_UserSelction_Payment_PayWait();
					enterSequence_main_region_UserSelction_Payment_Coins_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_Payment_Coins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[1]) && ((sCInterface.operationCallback.isPaid() && sCInterface.operationCallback.isDispo())))) {
				exitSequence_main_region_UserSelction_Payment_Coins();
				react_main_region_UserSelction_Payment__exit_Default();
			} else {
				if (sCInterface.coinTrigger) {
					exitSequence_main_region_UserSelction_Payment_Coins();
					enterSequence_main_region_UserSelction_Payment_Coins_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_Payment_NFC_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[2]) && ((sCInterface.operationCallback.isPaid() && sCInterface.operationCallback.isDispo())))) {
				exitSequence_main_region_UserSelction_Payment_NFC();
				react_main_region_UserSelction_Payment__exit_Default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_produceSelection_SelectionWait_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.sugarTrigger || (sCInterface.sizeTrigger || (sCInterface.temperatureTrigger || sCInterface.selectionTrigger)))) {
				exitSequence_main_region_UserSelction_produceSelection_SelectionWait();
				enterSequence_main_region_UserSelction_produceSelection_SelectionWait_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_sliderType_classicSliders_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.soupTrigger) {
				exitSequence_main_region_UserSelction_sliderType_classicSliders();
				enterSequence_main_region_UserSelction_sliderType_soupSliders_default();
			} else {
				if (sCInterface.iceTeaTrigger) {
					exitSequence_main_region_UserSelction_sliderType_classicSliders();
					enterSequence_main_region_UserSelction_sliderType_IceTeaSLiders_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_sliderType_soupSliders_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.iceTeaTrigger) {
				exitSequence_main_region_UserSelction_sliderType_soupSliders();
				enterSequence_main_region_UserSelction_sliderType_IceTeaSLiders_default();
			} else {
				if (sCInterface.classicDrinkTrigger) {
					exitSequence_main_region_UserSelction_sliderType_soupSliders();
					enterSequence_main_region_UserSelction_sliderType_classicSliders_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_sliderType_IceTeaSLiders_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.soupTrigger) {
				exitSequence_main_region_UserSelction_sliderType_IceTeaSLiders();
				enterSequence_main_region_UserSelction_sliderType_soupSliders_default();
			} else {
				if (sCInterface.classicDrinkTrigger) {
					exitSequence_main_region_UserSelction_sliderType_IceTeaSLiders();
					enterSequence_main_region_UserSelction_sliderType_classicSliders_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_UserSelction_time_timer_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.coinTrigger || (sCInterface.nfcTrigger || (sCInterface.sugarTrigger || (sCInterface.sizeTrigger || (sCInterface.temperatureTrigger || sCInterface.selectionTrigger)))))) {
				exitSequence_main_region_UserSelction_time_timer();
				enterSequence_main_region_UserSelction_time_timer_default();
				main_region_UserSelction_react(false);
			} else {
				if (timeEvents[3]) {
					exitSequence_main_region_UserSelction();
					sCInterface.raiseDoRefund();
					
					enterSequence_main_region_Init_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_UserSelction_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r1_waterHeat_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[4]) && (sCInterface.operationCallback.isHot()))) {
				exitSequence_main_region_HotDrinkPreparation_r1_waterHeat();
				enterSequence_main_region_HotDrinkPreparation_r1_pause_default();
			} else {
				if (timeEvents[5]) {
					exitSequence_main_region_HotDrinkPreparation_r1_waterHeat();
					enterSequence_main_region_HotDrinkPreparation_r1_waterHeat_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r1_sugarAdd_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r1_pause_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[6]) && ((sCInterface.operationCallback.isReady() && (sCInterface.getSelection()== null?"Soup" !=null : !sCInterface.getSelection().equals("Soup")))))) {
				exitSequence_main_region_HotDrinkPreparation_r1_pause();
				enterSequence_main_region_HotDrinkPreparation_r1_sugarAdd_default();
			} else {
				if (((timeEvents[7]) && ((sCInterface.operationCallback.isReady() && (sCInterface.getSelection()== null?"Soup" ==null :sCInterface.getSelection().equals("Soup")))))) {
					exitSequence_main_region_HotDrinkPreparation_r1_pause();
					enterSequence_main_region_HotDrinkPreparation_r1_spicesAdd_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r1_spicesAdd_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((sCInterface.getSelection()== null?"Coffee" ==null :sCInterface.getSelection().equals("Coffee"))) {
				exitSequence_main_region_HotDrinkPreparation_r2_start();
				enterSequence_main_region_HotDrinkPreparation_r2_coffee_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				if ((sCInterface.getSelection()== null?"Expresso" ==null :sCInterface.getSelection().equals("Expresso"))) {
					exitSequence_main_region_HotDrinkPreparation_r2_start();
					enterSequence_main_region_HotDrinkPreparation_r2_expresso_default();
					main_region_HotDrinkPreparation_react(false);
				} else {
					if ((sCInterface.getSelection()== null?"Tea" ==null :sCInterface.getSelection().equals("Tea"))) {
						exitSequence_main_region_HotDrinkPreparation_r2_start();
						enterSequence_main_region_HotDrinkPreparation_r2_tea_default();
						main_region_HotDrinkPreparation_react(false);
					} else {
						if ((sCInterface.getSelection()== null?"Soup" ==null :sCInterface.getSelection().equals("Soup"))) {
							exitSequence_main_region_HotDrinkPreparation_r2_start();
							enterSequence_main_region_HotDrinkPreparation_r2_putCup_default();
							main_region_HotDrinkPreparation_react(false);
						} else {
							if ((sCInterface.getSelection()== null?"IcedTea" ==null :sCInterface.getSelection().equals("IcedTea"))) {
								exitSequence_main_region_HotDrinkPreparation_r2_start();
								enterSequence_main_region_HotDrinkPreparation_r2_ice_tea_default();
								main_region_HotDrinkPreparation_react(false);
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_coffee_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_main_region_HotDrinkPreparation_r2_coffee();
				enterSequence_main_region_HotDrinkPreparation_r2_putCup_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_expresso_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[9]) {
				exitSequence_main_region_HotDrinkPreparation_r2_expresso();
				enterSequence_main_region_HotDrinkPreparation_r2_putCup_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_tea_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[10]) {
				exitSequence_main_region_HotDrinkPreparation_r2_tea();
				enterSequence_main_region_HotDrinkPreparation_r2_putCup_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_putCup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[11]) && ((sCInterface.operationCallback.isHot() && (sCInterface.getSelection()== null?"Soup" !=null : !sCInterface.getSelection().equals("Soup")))))) {
				exitSequence_main_region_HotDrinkPreparation_r2_putCup();
				enterSequence_main_region_HotDrinkPreparation_r2_waterFlow_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				if ((sCInterface.operationCallback.isHot() && (sCInterface.getSelection()== null?"Soup" ==null :sCInterface.getSelection().equals("Soup")))) {
					exitSequence_main_region_HotDrinkPreparation_r2_putCup();
					enterSequence_main_region_HotDrinkPreparation_r2_soup_default();
					main_region_HotDrinkPreparation_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_waterFlow_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[12]) && ((sCInterface.operationCallback.isComplete() && (sCInterface.getSelection()== null?"Tea" ==null :sCInterface.getSelection().equals("Tea")))))) {
				exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
				enterSequence_main_region_HotDrinkPreparation_r2_infusion_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				if (((timeEvents[13]) && (((sCInterface.operationCallback.isComplete() && (sCInterface.getSelection()== null?"Tea" !=null : !sCInterface.getSelection().equals("Tea"))) && (sCInterface.getSelection()== null?"IcedTea" !=null : !sCInterface.getSelection().equals("IcedTea")))))) {
					exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
					enterSequence_main_region_HotDrinkPreparation_r2_finish_default();
					main_region_HotDrinkPreparation_react(false);
				} else {
					if (((timeEvents[14]) && ((sCInterface.operationCallback.isComplete() && (sCInterface.getSelection()== null?"IcedTea" ==null :sCInterface.getSelection().equals("IcedTea")))))) {
						exitSequence_main_region_HotDrinkPreparation_r2_waterFlow();
						enterSequence_main_region_HotDrinkPreparation_r2_cooling_default();
						main_region_HotDrinkPreparation_react(false);
					} else {
						did_transition = false;
					}
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_infusion_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[15]) {
				exitSequence_main_region_HotDrinkPreparation_r2_infusion();
				enterSequence_main_region_HotDrinkPreparation_r2_finish_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_finish_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[16]) {
				exitSequence_main_region_HotDrinkPreparation_r2_finish();
				react_main_region_HotDrinkPreparation_r2__exit_Default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_soup_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[17]) {
				exitSequence_main_region_HotDrinkPreparation_r2_soup();
				enterSequence_main_region_HotDrinkPreparation_r2_waterFlow_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_ice_tea_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[18]) {
				exitSequence_main_region_HotDrinkPreparation_r2_ice_tea();
				enterSequence_main_region_HotDrinkPreparation_r2_putCup_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_HotDrinkPreparation_r2_cooling_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.coolingDone) {
				exitSequence_main_region_HotDrinkPreparation_r2_cooling();
				enterSequence_main_region_HotDrinkPreparation_r2_finish_default();
				main_region_HotDrinkPreparation_react(false);
			} else {
				if (timeEvents[19]) {
					exitSequence_main_region_HotDrinkPreparation_r2_cooling();
					enterSequence_main_region_HotDrinkPreparation_r2_cooling_default();
					main_region_HotDrinkPreparation_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_HotDrinkPreparation_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Pay_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[20]) {
				exitSequence_main_region_Pay();
				enterSequence_main_region_HotDrinkPreparation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
